Meant for participants in the kaiwanTECH 'Linux Kernel Internals' and/or
'Linux Device Drivers' training courses.
----------------------------------------------------------------------------------
This directory serves as a 'template' for submitting assignments. Please do go 
through it carefully and follow the conventions and style; particularly, see and
follow the various Makefile targets. In general, follow all guidelines you have
been given in the "Grading Methodology" PDF sent earlier to you.

IMPORTANT ::

We expect you to have several targets in the Makefile (besides the usual
suspects); do see the Makefile 'template' here. The output of the 'make 
help' below shows the targets expected (besides the 'usual' program built
for non-debug as well as for debug):

$ make help
=== Makefile Help : additional targets available ===

TIP: type make <tab><tab> to show all valid targets

--- kernel code style targets ---
code-style : "wrapper" target over the following kernel code style targets
 indent     : run the indent utility on source file(s) to indent them as per the kernel code style
 checkpatch : run the kernel code style checker tool on source file(s)

--- kernel static analyzer targets ---
sa         : "wrapper" target over the following kernel static analyzer targets
 sa_sparse  : run the static analysis sparse tool on the source file(s)
 sa_gcc     : run gcc with option -W1 ("Generally useful warnings") on the source file(s)
 sa_flawfinder : run the static analysis flawfinder tool on the source file(s)
TIP: use coccinelle as well (requires spatch): https://www.kernel.org/doc/html/v4.15/dev-tools/coccinelle.html

--- kernel dynamic analysis targets ---
da_kasan   : DUMMY target: this is to remind you to run your code with the dynamic analysis KASAN tool enabled; requires configuring the kernel with CONFIG_KASAN On, rebuild and boot it
da_lockdep : DUMMY target: this is to remind you to run your code with the dynamic analysis LOCKDEP tool (for deep locking issues analysis) enabled; requires configuring the kernel with CONFIG_PROVE_LOCKING On, rebuild and boot it
TIP: best to build a debug kernel with several kernel debug config options turned On, boot via it and run all your test cases

--- misc targets ---
clean      : cleanup - remove all the kernel objects, temp files/dirs, etc
package    : tar and compress the source files into the dir above
help       : this help target
$ 

FYI, the checkpatch.pl Perl script is part of the Linux kernel source; you can
download it here:
https://github.com/torvalds/linux/blob/master/scripts/checkpatch.pl

----------------------------------------------------------------------------------
README : for the 'lkm_template' Linux LKm (Lodable Kernel Module)
Part of the 'Linux Kernel Internals' training, kaiwanTECH
June 2020

--------------------------------------------------------
Assignment: <assignment-name>

<Describe the assignment, expected behavior and results here>
--------------------------------------------------------

To build:
make

Type
make <tab><tab>
to see all available targets
(remember to put a space after typing 'make').

make <target>
to build <target>.
----------------------------------------------------------------------------------


A few important rules / a quick Checklist for the Programmer
----------------------------------------------------------------------------------
DID YOU REMEMBER TO
✔ Rule #1 : Check all APIs for their failure case
✔ Rule #2 : Compile with warnings on (-Wall -Wextra) and eliminate all
   warnings as far as is possible
✔ Rule #3 : Never trust [user] input; validate it
✔ Rule #4 : Eliminate unused (or dead) code from the codebase immediately
✔ Rule #5 : Test thoroughly; 100% code coverage is the objective. Take the
   time and trouble to learn to use powerful tools: memory checkers
   (KASAN, kernel memory leak detector, etc), static and dynamic analyzers,
   security checkers (checksec), fuzzers, etc
✔ Rule #6 : Do NOT Assume Anything
   (“ASSUME : makes an ASS out of U and ME” :-) )

Also see:
LOW-LEVEL SOFTWARE DESIGN: https://kaiwantech.wordpress.com/2017/01/03/low-level-software-design/
