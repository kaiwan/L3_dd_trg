#!/bin/bash
set -euo pipefail

name=$(basename $0)
DEFAULT_DRIVER="usbhid"
### KEEP this UPDATED ! ################################################
# 0d8d:1516 Promotion & Display Technology, Ltd Wireless Present   (PDL)
MY_DRIVER="laserp"
MYUSB_VID=0D8D
MYUSB_PID=1516
#########################################################################

die()
{
 echo >&2 "${name}:FATAL: $*" ; exit 1
}

unbind()
{
local USB_DEVICE=$1
echo "Unbinding ${USB_DEVICE} from ${DEFAULT_DRIVER}"
sudo sh -c "echo -n ${USB_DEVICE} > /sys/bus/usb/drivers/${DEFAULT_DRIVER}/unbind"
if [ $? -ne 0 ]
then
	echo -e "\e[1m\e[41m[ERROR] Could not unbind:" $err "\e[0m"
	echo "The reason for this might be: "
	echo "(*)Device has already been unbound from" ${DEFAULT_DRIVER}
	echo "(*)${DEFAULT_DRIVER} is not responsible for this device"
	echo "(*)${USB_DEVICE} is not the correct USB device"
	return 1
fi
return 0
}

bind()
{
local USB_DEVICE=$1
echo "Binding $1 to ${MY_DRIVER}"
#err=$(sudo sh -c 'echo -n ${USB_DEVICE} > /sys/bus/usb/drivers/${MY_DRIVER}/bind' 2>&1)
sudo sh -c "echo -n ${USB_DEVICE} > /sys/bus/usb/drivers/${MY_DRIVER}/bind"
#if [ ! -z "$err" ]
if [ $? -ne 0 ]
then
	echo "[ERROR] Could not bind:" $err
	echo "The reason for this might be: "
	echo "(*)Device has already been bound to ${MY_DRIVER}"
	echo "(*)${MY_DRIVER} does not support this device"
	return 1
fi
return 0
}

# $1 : the USB usbhid driver's bus address
check_id_bind_on_match()
{
local MYUSB_VID=${MYUSB_VID^^} # to uppercase
local MYUSB_PID=${MYUSB_PID^^}
local USB_DEVICE="$1"

# Auto check
if [[ -f /sys/bus/usb/drivers/${DEFAULT_DRIVER}/${USB_DEVICE}/modalias ]] ; then
 # the 'modalias' looks like this (for example):
 # usb:v0D8Dp1516d1110dc00dsc00dp00ic03isc01ip02in00

 local UVID=$(cut -d: -f2 /sys/bus/usb/drivers/${DEFAULT_DRIVER}/${USB_DEVICE}/modalias |cut -c2-5)
 local UPID=$(cut -d: -f2 /sys/bus/usb/drivers/${DEFAULT_DRIVER}/${USB_DEVICE}/modalias |cut -c7-10)
 #echo "(FYI: for provided bus/device VID:PID is ${UVID}:${UPID}"
 lsusb | grep -i "${UVID}:${UPID}" || {
   echo "No USB device match, aborting" ; return 1
 }
 if [[ "${UVID}" = "${MYUSB_VID}" ]] && [[ "${UPID}" = "${MYUSB_PID}" ]] ; then
   echo " MATCH, proceeding"
   FOUND=1
   lsusb | grep -i "${UVID}:${UPID}" >/dev/null || {  # re-confirm it's there (??)
     echo "No USB device match, aborting" ; return 1
   }
   unbind ${USB_DEVICE} || return 1
   sleep .1
   bind ${USB_DEVICE} && {
     echo "${name}: done, device drive by ${MY_DRIVER} is now ready to use!" ; return 0
   } || return 1
 fi
fi
}


#--- 'main'

lsmod|grep ${MY_DRIVER} >/dev/null || {
  sudo modprobe ${MY_DRIVER} || die "modprobe ${MY_DRIVER} failed? Insert your \"${MY_DRIVER}\" driver first and retry"
}

[[ 0 -eq 1 ]] && {
[[ $# -ne 1 ]] && {
  echo "Usage: $0 <usb-bus-#>
F.e. $0 1-2:1.0
(TIPs: 
  - Check under /sys/bus/usb/drivers/${DEFAULT_DRIVER} and/or look up dmesg
  - Just specify the first of the bus addresses as the argument (f.e. rebind 1-2:1.0)"
  res=$(ls -1d /sys/bus/usb/drivers/${DEFAULT_DRIVER}/[0-9]* 2>/dev/null) || true
  [[ -z "${res}" ]] && echo "Currently there aren't any (under /sys/bus/usb/drivers/${DEFAULT_DRIVER})" || echo "
Here's the currently assigned bus addresses:

${res}
"
#  exit 1
}
}

res=$(ls -1d /sys/bus/usb/drivers/${DEFAULT_DRIVER}/[0-9]* 2>/dev/null) || true
[[ -z "${res}" ]] && die "Currently there aren't any (under /sys/bus/usb/drivers/${DEFAULT_DRIVER})"

FOUND=0
echo "=== Now checking all USB devices on the ${DEFAULT_DRIVER} USB bus"
for usbbus in ${res}
do
  USB_BUS=$(basename ${usbbus})
  echo "--- USB bus = ${USB_BUS}"
  check_id_bind_on_match ${USB_BUS}
  [[ ${FOUND} -eq 1 ]] && break
done

[[ ${FOUND} -eq 0 ]] && {
  echo "${name}: USB device for driver \"${MY_DRIVER}\" not present? aborting..."
  exit 1
}
exit 0
